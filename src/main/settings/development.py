"""
Django settings for this project.

Generated by 'django-admin startproject' using Django 1.11.2.

For more information on this file, see
https://docs.djangoproject.com/en/1.11/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.11/ref/settings/
"""

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
from api.v1.hostinguard.constants import APP1

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

LOGGER = 'django'
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'simple': {
            'format': '{asctime} {levelname} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'file': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': 'server.log',
            'formatter': 'simple'
        },
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'simple'
        },
    },
    'loggers': {
        LOGGER: {
            'handlers': ['console', 'file'],
            'level': 'INFO',
            'propagate': True,
        },
    },
}

# Used by django to make hashes. Be sure to set it properly, normally
# "django-admin startproject" provides it, otherwise please use a generator
# (e.g. https://www.miniwebtool.com/django-secret-key-generator) and set it.
SECRET_KEY = 'change_me'

ALLOWED_HOSTS = [
    'localhost',
]

# Application definition

INSTALLED_APPS = (
    'api.v1.health',
    'api.v1.hostinguard',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
)

MIDDLEWARE = (
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
)


ROOT_URLCONF = 'main.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR + '/templates/', ],
        'APP_DIRS': True,

        # The following options are required by django-admin interface
        'OPTIONS': {
            'context_processors': [
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'django.template.context_processors.request',
            ],
        },
    },
]

WSGI_APPLICATION = 'wsgi.application'

REST_FRAMEWORK = {
    'DEFAULT_RENDERER_CLASSES': (
        'rest_framework.renderers.JSONRenderer',
    ),
    'DEFAULT_PARSER_CLASSES': (
        'rest_framework.parsers.JSONParser',
    ),
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.LimitOffsetPagination',
    'PAGE_SIZE': 50
}

# Password validation
# https://docs.djangoproject.com/en/1.11/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/1.11/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Environment specific settings
###############################

DEBUG = False

# Required, at least, for running unit tests
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': 'mydatabase',
    }
}

# Google API settings
#####################
GOOGLE_API = {
    APP1: {
        'API_NAME': 'fake_api_name',
        'API_VERSION': 'fake_api_version',
        'SERVICE_ACCOUNT_EMAIL': 'fake@account.email',
        'KEY_FILE_LOCATION': os.getcwd() + 'fake_file',
        'SCOPES': 'fake_scopes'
    },
}

# cPanel API settings
#####################
CPANEL = {
    APP1: {
        'HOST': 'fake_host',
        'USERNAME': 'fake_username',
        'PASSWORD': 'fake_password',
        'USE_SSL': False
    },
}

# static resource retrieval settings
####################################
STATIC_RESOURCE = {
    APP1: {
        'FREE_EP': 'fake_ep',
        'LOGS_EP': 'fake_ep'
    },
}

# ElasticSearch settings
########################
ES_SERVICE = 'fake_service'

ES = {
    APP1: {
        'INDEX': 'fake_index',
        'DOC_TYPE': 'fake_doc_type'
    },
}
